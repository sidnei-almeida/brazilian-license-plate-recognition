#!/usr/bin/env python3
"""
Script de instala√ß√£o e configura√ß√£o do Brazilian License Plate Recognition System
Autor: Sidnei Almeida
GitHub: https://github.com/sidnei-almeida
"""

import os
import sys
import subprocess
import platform

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 11):
        print("‚ùå Python 3.11+ √© necess√°rio. Voc√™ tem:", sys.version)
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} encontrado")
    return True

def check_requirements():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    try:
        import streamlit
        import ultralytics
        import plotly
        import cv2
        import numpy
        import pandas
        import PIL
        print("‚úÖ Todas as depend√™ncias principais est√£o instaladas")
        print("‚úÖ Sistema otimizado para Streamlit Cloud (CPU)")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia ausente: {e}")
        return False

def install_requirements():
    """Instala as depend√™ncias necess√°rias"""
    print("üì¶ Instalando depend√™ncias (otimizadas para Streamlit Cloud)...")

    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        print("‚úÖ Sistema pronto para Streamlit Cloud")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro na instala√ß√£o: {e}")
        return False

def check_model_files():
    """Verifica se os arquivos do modelo existem"""
    model_path = "plate_detector_v1/weights/best.pt"
    if os.path.exists(model_path):
        print("‚úÖ Modelo treinado encontrado")
        return True
    else:
        print(f"‚ö†Ô∏è  Modelo n√£o encontrado em {model_path}")
        print("‚ÑπÔ∏è  Voc√™ pode treinar o modelo usando o notebook fornecido")
        return False

def run_application():
    """Executa a aplica√ß√£o Streamlit"""
    print("üöÄ Iniciando aplica√ß√£o...")
    try:
        subprocess.check_call([sys.executable, "-m", "streamlit", "run", "app.py"])
    except KeyboardInterrupt:
        print("\nüõë Aplica√ß√£o interrompida pelo usu√°rio")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar aplica√ß√£o: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöó Brazilian License Plate Recognition - Setup")
    print("=" * 50)

    # Verificar vers√£o do Python
    if not check_python_version():
        sys.exit(1)

    # Verificar se est√° no diret√≥rio correto
    if not os.path.exists("requirements.txt"):
        print("‚ùå Execute este script a partir do diret√≥rio raiz do projeto")
        sys.exit(1)

    # Verificar depend√™ncias
    if not check_requirements():
        print("üì¶ Instalando depend√™ncias...")
        if not install_requirements():
            sys.exit(1)

    # Verificar arquivos do modelo
    check_model_files()

    print("\nüéØ Setup conclu√≠do! Iniciando aplica√ß√£o...")
    print("üåê Aplica√ß√£o dispon√≠vel em: http://localhost:8501")
    print("üöÄ Sistema otimizado para Streamlit Cloud")
    print("üìñ Consulte o README.md para deploy na nuvem")
    print("=" * 50)

    run_application()

if __name__ == "__main__":
    main()
